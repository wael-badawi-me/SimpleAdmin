<div class="card" style="margin-bottom:5px;">
    <div class="card-body">
        <EditForm @ref="itemForm" Model="productModel" OnValidSubmit="Save" @onreset="@Reset">
            <div class="row">
                <DataAnnotationsValidator />
                <input type="hidden" @bind-value="productModel.id" />
                <div class=col-6>
                    <div class="form-group">
                        <label>Name</label>
                        <InputText class="form-control" @bind-Value="productModel.title" />
                        <ValidationMessage For="@(()=> productModel.title)" />
                    </div>
                </div>
                <div class=col-6>
                    <div class="form-group">
                        <label>Category</label>
                        <Multidropdown @bind-DataList="multiCategory"></Multidropdown>
                    </div>
                </div>
                <div class=col-12>
                    <div class="form-group">
                        <label>Summary</label>
                        <InputText class="form-control" @bind-Value="productModel.summary" />
                        <ValidationMessage For="@(()=> productModel.summary)" />
                    </div>
                </div>
                <div class=col-12>
                    <div class="form-group">
                        <label>Description</label>
                        <InputText class="form-control" @bind-Value="productModel.description" />
                        <ValidationMessage For="@(()=> productModel.description)" />
                    </div>
                </div>
                <div class=col-6>
                    <div class="form-group">
                        <label>isEnabled</label>
                        <InputSelect class="form-control" @bind-Value="productModel.isEnabled">
                            <option value="true">Enabled</option>
                            <option value="false">Disabled</option>
                        </InputSelect>
                        <ValidationMessage For="@(()=> productModel.isEnabled)" />
                    </div>
                </div>
                <div class=col-6>
                    <div class="form-group">
                        <ImageUploader InputId="Upload" InputText="Upload Image" InputTextUploading="Uploading..."
                                       @bind-ImageSrc="productModel.Photo" ImageHeight="100" ImageWidth="100" OnUpload="@OnUpload"
                                       OnUploadFinish="@OnUploadFinish" UploadPath="items"/>
                    </div>
                </div>
                <h3>Seo Tools</h3>
                <hr />
                <div class=col-6>
                    <div class="form-group">
                        <label>Url</label>
                        <InputText class="form-control" @bind-Value="productModel.Url" />
                        <ValidationMessage For="@(()=> productModel.Url)" />
                    </div>
                </div>
                <div class=col-6>
                    <div class="form-group">
                        <label>Seo Title</label>
                        <InputText class="form-control" @bind-Value="productModel.seotitle" />
                        <ValidationMessage For="@(()=> productModel.seotitle)" />
                    </div>
                </div>
                <div class=col-6>
                    <div class="form-group">
                        <label>Seo Description</label>
                        <InputText class="form-control" @bind-Value="productModel.Seodescription" />
                        <ValidationMessage For="@(()=> productModel.Seodescription)" />
                    </div>
                </div>
                 <div class=col-6>
                    <div class="form-group">
                        <label>Seo keywords</label>
                        <InputText class="form-control" @bind-Value="productModel.seokeywords" />
                        <ValidationMessage For="@(()=> productModel.seokeywords)" />
                    </div>
                </div>

                <div class="form-group" style="margin-top:5px">
                    <button type="submit" class="btn btn-primary" disabled="@SaveBtnDisabled"><i class="oi oi-check"></i>Submit</button>
                    <button type="reset" class="btn btn-light">Cancel</button>
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {

    [Parameter]
    public ProductModel productModel { set; get; }
    [Parameter]
    public EventCallback OnSave { get; set; }
    [Parameter]
    public EventCallback OnCancel { get; set; }


    private List<MultiDDLModel> multiCategory = new List<MultiDDLModel>();




    EditForm itemForm { get; set; }
    private bool SaveBtnDisabled { get; set; } = false;
    private List<CategoryModel> categories { get; set; } = null;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            string token = await _tokenProvider.GetTokenAsync();
            HttpClient httpclient = _http.CreateClient("SimpleAdmin");
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            categories= await httpclient.GetFromJsonAsync<List<CategoryModel>>($"category/get/0/100?filters=&filtertxt=");
            foreach (var item in categories)
            {
                bool selected = false;
                if (productModel!=null && productModel.ProductCategories!=null)
                {
                    selected = productModel.ProductCategories.Where(c => c.id == item.id).Count() > 0;

                }
                multiCategory.Add(new MultiDDLModel(item.id.ToString(), item.Name, selected));
            }
        }
        catch (Exception ex)
        {
            _toastService.ShowError(@_messages.Value.CriticalError);
            var logger = _loggerFactory.CreateLogger<IndexForm>();
            logger.Log(LogLevel.Error, ex, "Get User");
        }
    }
    private async Task OnUpload()
    {
        SaveBtnDisabled = true;

    }
    private async Task OnUploadFinish()
    {
        SaveBtnDisabled = false;
    }
    private async Task Save()
    {
        try
        {
            List<CategoryModel> selectedCategories = new List<CategoryModel>();
            foreach (var item in multiCategory.Where(c=>c.Selected))
            {
                CategoryModel category = new CategoryModel();
                category.id =int.Parse(item.Id);
                category.Name = item.Value;
                category.Photo = item.Value;
                category.Url = item.Value;
                category.seotitle = item.Value;
                category.Seodescription = item.Value;
                category.seokeywords = item.Value;
                category.description = item.Value;
                selectedCategories.Add(category);
            }
            productModel.ProductCategories = selectedCategories;
            var httpclient = _http.CreateClient("SimpleAdmin");
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", await _tokenProvider.GetTokenAsync());
            var httpresult = await httpclient.PostAsJsonAsync<ProductModel>("item/save", productModel);
            if (httpresult.IsSuccessStatusCode)
            {
                _toastService.ShowSuccess(@_messages.Value.SaveSuccess);
                await OnSave.InvokeAsync();
            }
            else
            {
                _toastService.ShowError(@_messages.Value.CriticalError);
            }
        }
        catch (Exception ex)
        {
            _toastService.ShowError(@_messages.Value.CriticalError);
            var logger = _loggerFactory.CreateLogger<IndexForm>();
            logger.Log(LogLevel.Error, ex, "Item Form");
        }
    }
    private async Task Reset()
    {
        _toastService.ShowInfo(@_messages.Value.TransactionCanceled);
        await OnCancel.InvokeAsync();
    }
}